//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Input/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""1fade6e2-dd83-4f88-92c9-ada58dab9264"",
            ""actions"": [
                {
                    ""name"": ""MoveDir"",
                    ""type"": ""Value"",
                    ""id"": ""1bccc64b-0f20-4fb4-81c7-5c8e058ee01e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""23a415cc-3320-49a9-a03f-90627d5a992e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""cb99a242-bf04-4bb6-a67c-79f17b9a9c17"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0ccf089c-3586-485b-9013-60894e57137a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1463efef-5df1-45ca-86a4-dbfaeecf1f72"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29ab90ed-69be-4abb-becd-e23fc0ffba45"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bf37fa88-ef62-4961-ba8c-10a5f6c7f72d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""57547f65-c566-4296-8595-59bf2d8fbe10"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ed3ddea8-0abf-4ed0-acf9-263222aeec48"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""916982f3-1d06-4d31-a0dc-fbf96bf8b444"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""f769bc58-2d07-4ad0-8dff-adfe2425af8c"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""12eaf57d-d170-46e0-92cd-2c3b5b08583e"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8eebd07a-d432-4045-8576-088fae7576e6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95c90b18-bb92-4e5e-a129-3e3f3c4ee307"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraMovement"",
            ""id"": ""a9e7d9a1-3b00-4cc7-bcd0-6d54366bef21"",
            ""actions"": [
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""e3beb489-8cc4-46e8-b8ca-214eb0629f78"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragObject"",
                    ""type"": ""Button"",
                    ""id"": ""018f33e5-5022-40c5-b80e-d5d9dbf49a72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""Value"",
                    ""id"": ""bd13dc71-8bb4-4394-b945-fde9883c9005"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""410417d5-e01c-4142-80a3-38e6d6272b18"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6660985e-1f4e-4d96-a329-c61d4f6d65f7"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=10)"",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3032288-f7dd-4461-93a0-3741efbab60e"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7319b06-83e9-428f-a439-0972be607f7d"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=10)"",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""68253801-fa18-479d-98d7-f845ac8be3ce"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""20ea4125-3d26-4acb-92ae-acf896d19973"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragObject"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""BookActions"",
            ""id"": ""be80d4a6-8c4b-498f-8aa8-0f1b795b0841"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""2d7f4ea9-4701-42af-8daa-6028d87cf8a8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""OpenBook"",
                    ""type"": ""Button"",
                    ""id"": ""70e9bce3-1895-4021-a2c9-26bcf0879433"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DrawButton"",
                    ""type"": ""Button"",
                    ""id"": ""e1934e27-bb96-4f6d-b630-a8ac421fdc17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Value"",
                    ""id"": ""626008f0-634e-456a-96e3-6bfe1d7a2af7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bf59daa3-40be-42b2-b263-28ede2f1456c"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Gamepad"",
                    ""id"": ""d0f48be2-0b07-48c5-a8d2-c8e6ad1e6295"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fee50bf7-edce-4838-a485-509c38a52172"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""27a91165-3ab1-4c54-9a36-032b83c6a024"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a2908ce5-745e-4fbd-a7d3-fa73ddebb8cc"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c9408fcd-6cc8-42a1-bb6e-51d3d9c3a735"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c6de6a17-8ee9-4a51-829c-094cf80f0103"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenBook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91c95c0a-597f-4abd-b5a0-5963fdf5e542"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenBook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db917c47-f46e-43db-bafc-66ef6c56f1b1"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrawButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""72e5b76a-a763-4798-a966-0a7e35175ab6"",
                    ""path"": ""<Gamepad>/rightStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DrawButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""906f3a50-84f7-4693-bf42-8e5dae8f3f6c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=4,y=4)"",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cef02342-cc77-4251-a2e3-998a3200018f"",
                    ""path"": ""<Gamepad>/rightStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""31b2bd62-447d-4131-a696-41a81da6ddfb"",
                    ""path"": ""<Gamepad>/rightStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4af03913-097e-45fb-9651-fea38874d43f"",
                    ""path"": ""<Gamepad>/rightStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""9cb65f02-103a-42ef-8057-703154c939b4"",
                    ""path"": ""<Gamepad>/rightStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""CardUsage"",
            ""id"": ""7290b582-b780-4589-85cb-459b3de531a5"",
            ""actions"": [
                {
                    ""name"": ""UseCard0"",
                    ""type"": ""Button"",
                    ""id"": ""216240af-a8df-4dad-be73-f05c8465828f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard1"",
                    ""type"": ""Button"",
                    ""id"": ""793e8390-a739-4429-9c94-2b414b79c321"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard2"",
                    ""type"": ""Button"",
                    ""id"": ""7153dbce-024d-416c-86dc-7ce40a30d2bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard3"",
                    ""type"": ""Button"",
                    ""id"": ""1168196b-dfa9-4d0f-baf9-1788aff1c576"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard4"",
                    ""type"": ""Button"",
                    ""id"": ""388d6471-5c43-4822-b130-8574dad6be4a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseCard5"",
                    ""type"": ""Button"",
                    ""id"": ""0b851386-2848-4455-94ab-2a60e2a89288"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CardUseSelf"",
                    ""type"": ""Button"",
                    ""id"": ""93ab373d-4b43-48bd-848f-2a18a86fb8ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CardUseThrow"",
                    ""type"": ""Button"",
                    ""id"": ""3e758258-4f2c-4c3e-9224-5d3f92fab0c3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CardSelectRelative"",
                    ""type"": ""Button"",
                    ""id"": ""fc7995e4-66da-4eea-a150-f49c5fd48912"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f865ccf2-5cac-4e45-b611-8a2e6ad37f1a"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e18ccb74-9f74-4f06-a175-529edf867d60"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8dbfc264-9b88-4af5-9eec-46a9e92b79f6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da581d30-aa0c-4d59-9514-e80d362d07da"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf609782-771d-4ef9-b5f4-002df5a7158e"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard4"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8da84bb3-cfae-4ca1-a8e9-4cb47ba94e10"",
                    ""path"": ""<Keyboard>/6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseCard5"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4fe051b0-13d9-4806-acc5-db4864d1ff3e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardUseSelf"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0761d9e-f22d-4917-acf9-535c62429bdb"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardUseThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74498855-6481-4515-943c-8f9ba7f5b6d8"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardUseThrow"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""66ccca74-eeb2-439f-9b96-776cf014d3ec"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardSelectRelative"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""2694469d-2a2a-48cb-a629-59056fcd1843"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardSelectRelative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""abd8b1e2-c63a-4acb-aaa3-c402593ee190"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardSelectRelative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""592e576f-0f40-4a01-84d8-a55591d2aa09"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardSelectRelative"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3f8e8e75-a524-471d-8983-2db5a42b1970"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardSelectRelative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""3b711fd9-617f-4dad-970a-ef252a629e33"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CardSelectRelative"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Drag"",
            ""id"": ""d0624c8a-149e-48ae-a346-e65ea4880c36"",
            ""actions"": [
                {
                    ""name"": ""DragRotate"",
                    ""type"": ""Button"",
                    ""id"": ""24f162d6-9526-4da9-9254-27e3b10512e4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseX"",
                    ""type"": ""Value"",
                    ""id"": ""952d25a0-037d-4840-b2e4-199982160b1b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseY"",
                    ""type"": ""Value"",
                    ""id"": ""aea2b79a-a42e-4558-aed0-68f484842db7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2f4bc920-de87-4c9c-a300-c963b59e2f94"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bfa99244-9526-441f-a520-bc8b95790320"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""837690bb-7192-40b5-9df8-7025ed2d538c"",
                    ""path"": ""<Mouse>/delta/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74e3c3da-3072-4741-bb0b-123d20e8de99"",
                    ""path"": ""<Gamepad>/rightStick/y"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=5)"",
                    ""groups"": """",
                    ""action"": ""MouseY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d68af8b-bb87-4113-9059-71a7e3e0920b"",
                    ""path"": ""<Mouse>/delta/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca6316c8-ea7f-4424-87dd-edfbc8987dcb"",
                    ""path"": ""<Gamepad>/rightStick/x"",
                    ""interactions"": """",
                    ""processors"": ""Scale(factor=5)"",
                    ""groups"": """",
                    ""action"": ""MouseX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Scanner"",
            ""id"": ""4056d811-3e80-4c04-a088-9be47cf07efc"",
            ""actions"": [
                {
                    ""name"": ""Scan"",
                    ""type"": ""Button"",
                    ""id"": ""7e9cf131-e76a-4dff-8b58-9169eff726c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e592e7be-09ea-44b5-bc4c-5daef99804f5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e37ece9a-1301-4e2f-9287-f8001bbfd138"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheats"",
            ""id"": ""7138b9fd-40dd-476d-a695-9b3f48ecf321"",
            ""actions"": [
                {
                    ""name"": ""UnlockAllSpells"",
                    ""type"": ""Button"",
                    ""id"": ""a2cf57cd-6b3a-4b9f-a83b-a18f4cafe753"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61abe3e1-55f0-43ac-b1e6-2e00a86a52c7"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UnlockAllSpells"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""WorldInteractions"",
            ""id"": ""8086503f-bfe9-4d9e-a994-2cdb85d656aa"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a8b14236-d89e-4c17-aac8-58af11859ee2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""26627d9e-721b-4d0a-8838-e54e50b2cdf6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_MoveDir = m_Movement.FindAction("MoveDir", throwIfNotFound: true);
        m_Movement_Jump = m_Movement.FindAction("Jump", throwIfNotFound: true);
        // CameraMovement
        m_CameraMovement = asset.FindActionMap("CameraMovement", throwIfNotFound: true);
        m_CameraMovement_MouseX = m_CameraMovement.FindAction("MouseX", throwIfNotFound: true);
        m_CameraMovement_DragObject = m_CameraMovement.FindAction("DragObject", throwIfNotFound: true);
        m_CameraMovement_MouseY = m_CameraMovement.FindAction("MouseY", throwIfNotFound: true);
        // BookActions
        m_BookActions = asset.FindActionMap("BookActions", throwIfNotFound: true);
        m_BookActions_MousePosition = m_BookActions.FindAction("MousePosition", throwIfNotFound: true);
        m_BookActions_OpenBook = m_BookActions.FindAction("OpenBook", throwIfNotFound: true);
        m_BookActions_DrawButton = m_BookActions.FindAction("DrawButton", throwIfNotFound: true);
        m_BookActions_Newaction = m_BookActions.FindAction("New action", throwIfNotFound: true);
        // CardUsage
        m_CardUsage = asset.FindActionMap("CardUsage", throwIfNotFound: true);
        m_CardUsage_UseCard0 = m_CardUsage.FindAction("UseCard0", throwIfNotFound: true);
        m_CardUsage_UseCard1 = m_CardUsage.FindAction("UseCard1", throwIfNotFound: true);
        m_CardUsage_UseCard2 = m_CardUsage.FindAction("UseCard2", throwIfNotFound: true);
        m_CardUsage_UseCard3 = m_CardUsage.FindAction("UseCard3", throwIfNotFound: true);
        m_CardUsage_UseCard4 = m_CardUsage.FindAction("UseCard4", throwIfNotFound: true);
        m_CardUsage_UseCard5 = m_CardUsage.FindAction("UseCard5", throwIfNotFound: true);
        m_CardUsage_CardUseSelf = m_CardUsage.FindAction("CardUseSelf", throwIfNotFound: true);
        m_CardUsage_CardUseThrow = m_CardUsage.FindAction("CardUseThrow", throwIfNotFound: true);
        m_CardUsage_CardSelectRelative = m_CardUsage.FindAction("CardSelectRelative", throwIfNotFound: true);
        // Drag
        m_Drag = asset.FindActionMap("Drag", throwIfNotFound: true);
        m_Drag_DragRotate = m_Drag.FindAction("DragRotate", throwIfNotFound: true);
        m_Drag_MouseX = m_Drag.FindAction("MouseX", throwIfNotFound: true);
        m_Drag_MouseY = m_Drag.FindAction("MouseY", throwIfNotFound: true);
        // Scanner
        m_Scanner = asset.FindActionMap("Scanner", throwIfNotFound: true);
        m_Scanner_Scan = m_Scanner.FindAction("Scan", throwIfNotFound: true);
        // Cheats
        m_Cheats = asset.FindActionMap("Cheats", throwIfNotFound: true);
        m_Cheats_UnlockAllSpells = m_Cheats.FindAction("UnlockAllSpells", throwIfNotFound: true);
        // WorldInteractions
        m_WorldInteractions = asset.FindActionMap("WorldInteractions", throwIfNotFound: true);
        m_WorldInteractions_Interact = m_WorldInteractions.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_MoveDir;
    private readonly InputAction m_Movement_Jump;
    public struct MovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public MovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveDir => m_Wrapper.m_Movement_MoveDir;
        public InputAction @Jump => m_Wrapper.m_Movement_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @MoveDir.started += instance.OnMoveDir;
            @MoveDir.performed += instance.OnMoveDir;
            @MoveDir.canceled += instance.OnMoveDir;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @MoveDir.started -= instance.OnMoveDir;
            @MoveDir.performed -= instance.OnMoveDir;
            @MoveDir.canceled -= instance.OnMoveDir;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);

    // CameraMovement
    private readonly InputActionMap m_CameraMovement;
    private List<ICameraMovementActions> m_CameraMovementActionsCallbackInterfaces = new List<ICameraMovementActions>();
    private readonly InputAction m_CameraMovement_MouseX;
    private readonly InputAction m_CameraMovement_DragObject;
    private readonly InputAction m_CameraMovement_MouseY;
    public struct CameraMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public CameraMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseX => m_Wrapper.m_CameraMovement_MouseX;
        public InputAction @DragObject => m_Wrapper.m_CameraMovement_DragObject;
        public InputAction @MouseY => m_Wrapper.m_CameraMovement_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_CameraMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraMovementActions set) { return set.Get(); }
        public void AddCallbacks(ICameraMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Add(instance);
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @DragObject.started += instance.OnDragObject;
            @DragObject.performed += instance.OnDragObject;
            @DragObject.canceled += instance.OnDragObject;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
        }

        private void UnregisterCallbacks(ICameraMovementActions instance)
        {
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @DragObject.started -= instance.OnDragObject;
            @DragObject.performed -= instance.OnDragObject;
            @DragObject.canceled -= instance.OnDragObject;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
        }

        public void RemoveCallbacks(ICameraMovementActions instance)
        {
            if (m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraMovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraMovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraMovementActions @CameraMovement => new CameraMovementActions(this);

    // BookActions
    private readonly InputActionMap m_BookActions;
    private List<IBookActionsActions> m_BookActionsActionsCallbackInterfaces = new List<IBookActionsActions>();
    private readonly InputAction m_BookActions_MousePosition;
    private readonly InputAction m_BookActions_OpenBook;
    private readonly InputAction m_BookActions_DrawButton;
    private readonly InputAction m_BookActions_Newaction;
    public struct BookActionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public BookActionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_BookActions_MousePosition;
        public InputAction @OpenBook => m_Wrapper.m_BookActions_OpenBook;
        public InputAction @DrawButton => m_Wrapper.m_BookActions_DrawButton;
        public InputAction @Newaction => m_Wrapper.m_BookActions_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_BookActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BookActionsActions set) { return set.Get(); }
        public void AddCallbacks(IBookActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_BookActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BookActionsActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @OpenBook.started += instance.OnOpenBook;
            @OpenBook.performed += instance.OnOpenBook;
            @OpenBook.canceled += instance.OnOpenBook;
            @DrawButton.started += instance.OnDrawButton;
            @DrawButton.performed += instance.OnDrawButton;
            @DrawButton.canceled += instance.OnDrawButton;
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IBookActionsActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @OpenBook.started -= instance.OnOpenBook;
            @OpenBook.performed -= instance.OnOpenBook;
            @OpenBook.canceled -= instance.OnOpenBook;
            @DrawButton.started -= instance.OnDrawButton;
            @DrawButton.performed -= instance.OnDrawButton;
            @DrawButton.canceled -= instance.OnDrawButton;
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IBookActionsActions instance)
        {
            if (m_Wrapper.m_BookActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBookActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_BookActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BookActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BookActionsActions @BookActions => new BookActionsActions(this);

    // CardUsage
    private readonly InputActionMap m_CardUsage;
    private List<ICardUsageActions> m_CardUsageActionsCallbackInterfaces = new List<ICardUsageActions>();
    private readonly InputAction m_CardUsage_UseCard0;
    private readonly InputAction m_CardUsage_UseCard1;
    private readonly InputAction m_CardUsage_UseCard2;
    private readonly InputAction m_CardUsage_UseCard3;
    private readonly InputAction m_CardUsage_UseCard4;
    private readonly InputAction m_CardUsage_UseCard5;
    private readonly InputAction m_CardUsage_CardUseSelf;
    private readonly InputAction m_CardUsage_CardUseThrow;
    private readonly InputAction m_CardUsage_CardSelectRelative;
    public struct CardUsageActions
    {
        private @PlayerInputActions m_Wrapper;
        public CardUsageActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UseCard0 => m_Wrapper.m_CardUsage_UseCard0;
        public InputAction @UseCard1 => m_Wrapper.m_CardUsage_UseCard1;
        public InputAction @UseCard2 => m_Wrapper.m_CardUsage_UseCard2;
        public InputAction @UseCard3 => m_Wrapper.m_CardUsage_UseCard3;
        public InputAction @UseCard4 => m_Wrapper.m_CardUsage_UseCard4;
        public InputAction @UseCard5 => m_Wrapper.m_CardUsage_UseCard5;
        public InputAction @CardUseSelf => m_Wrapper.m_CardUsage_CardUseSelf;
        public InputAction @CardUseThrow => m_Wrapper.m_CardUsage_CardUseThrow;
        public InputAction @CardSelectRelative => m_Wrapper.m_CardUsage_CardSelectRelative;
        public InputActionMap Get() { return m_Wrapper.m_CardUsage; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CardUsageActions set) { return set.Get(); }
        public void AddCallbacks(ICardUsageActions instance)
        {
            if (instance == null || m_Wrapper.m_CardUsageActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CardUsageActionsCallbackInterfaces.Add(instance);
            @UseCard0.started += instance.OnUseCard0;
            @UseCard0.performed += instance.OnUseCard0;
            @UseCard0.canceled += instance.OnUseCard0;
            @UseCard1.started += instance.OnUseCard1;
            @UseCard1.performed += instance.OnUseCard1;
            @UseCard1.canceled += instance.OnUseCard1;
            @UseCard2.started += instance.OnUseCard2;
            @UseCard2.performed += instance.OnUseCard2;
            @UseCard2.canceled += instance.OnUseCard2;
            @UseCard3.started += instance.OnUseCard3;
            @UseCard3.performed += instance.OnUseCard3;
            @UseCard3.canceled += instance.OnUseCard3;
            @UseCard4.started += instance.OnUseCard4;
            @UseCard4.performed += instance.OnUseCard4;
            @UseCard4.canceled += instance.OnUseCard4;
            @UseCard5.started += instance.OnUseCard5;
            @UseCard5.performed += instance.OnUseCard5;
            @UseCard5.canceled += instance.OnUseCard5;
            @CardUseSelf.started += instance.OnCardUseSelf;
            @CardUseSelf.performed += instance.OnCardUseSelf;
            @CardUseSelf.canceled += instance.OnCardUseSelf;
            @CardUseThrow.started += instance.OnCardUseThrow;
            @CardUseThrow.performed += instance.OnCardUseThrow;
            @CardUseThrow.canceled += instance.OnCardUseThrow;
            @CardSelectRelative.started += instance.OnCardSelectRelative;
            @CardSelectRelative.performed += instance.OnCardSelectRelative;
            @CardSelectRelative.canceled += instance.OnCardSelectRelative;
        }

        private void UnregisterCallbacks(ICardUsageActions instance)
        {
            @UseCard0.started -= instance.OnUseCard0;
            @UseCard0.performed -= instance.OnUseCard0;
            @UseCard0.canceled -= instance.OnUseCard0;
            @UseCard1.started -= instance.OnUseCard1;
            @UseCard1.performed -= instance.OnUseCard1;
            @UseCard1.canceled -= instance.OnUseCard1;
            @UseCard2.started -= instance.OnUseCard2;
            @UseCard2.performed -= instance.OnUseCard2;
            @UseCard2.canceled -= instance.OnUseCard2;
            @UseCard3.started -= instance.OnUseCard3;
            @UseCard3.performed -= instance.OnUseCard3;
            @UseCard3.canceled -= instance.OnUseCard3;
            @UseCard4.started -= instance.OnUseCard4;
            @UseCard4.performed -= instance.OnUseCard4;
            @UseCard4.canceled -= instance.OnUseCard4;
            @UseCard5.started -= instance.OnUseCard5;
            @UseCard5.performed -= instance.OnUseCard5;
            @UseCard5.canceled -= instance.OnUseCard5;
            @CardUseSelf.started -= instance.OnCardUseSelf;
            @CardUseSelf.performed -= instance.OnCardUseSelf;
            @CardUseSelf.canceled -= instance.OnCardUseSelf;
            @CardUseThrow.started -= instance.OnCardUseThrow;
            @CardUseThrow.performed -= instance.OnCardUseThrow;
            @CardUseThrow.canceled -= instance.OnCardUseThrow;
            @CardSelectRelative.started -= instance.OnCardSelectRelative;
            @CardSelectRelative.performed -= instance.OnCardSelectRelative;
            @CardSelectRelative.canceled -= instance.OnCardSelectRelative;
        }

        public void RemoveCallbacks(ICardUsageActions instance)
        {
            if (m_Wrapper.m_CardUsageActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICardUsageActions instance)
        {
            foreach (var item in m_Wrapper.m_CardUsageActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CardUsageActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CardUsageActions @CardUsage => new CardUsageActions(this);

    // Drag
    private readonly InputActionMap m_Drag;
    private List<IDragActions> m_DragActionsCallbackInterfaces = new List<IDragActions>();
    private readonly InputAction m_Drag_DragRotate;
    private readonly InputAction m_Drag_MouseX;
    private readonly InputAction m_Drag_MouseY;
    public struct DragActions
    {
        private @PlayerInputActions m_Wrapper;
        public DragActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @DragRotate => m_Wrapper.m_Drag_DragRotate;
        public InputAction @MouseX => m_Wrapper.m_Drag_MouseX;
        public InputAction @MouseY => m_Wrapper.m_Drag_MouseY;
        public InputActionMap Get() { return m_Wrapper.m_Drag; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DragActions set) { return set.Get(); }
        public void AddCallbacks(IDragActions instance)
        {
            if (instance == null || m_Wrapper.m_DragActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DragActionsCallbackInterfaces.Add(instance);
            @DragRotate.started += instance.OnDragRotate;
            @DragRotate.performed += instance.OnDragRotate;
            @DragRotate.canceled += instance.OnDragRotate;
            @MouseX.started += instance.OnMouseX;
            @MouseX.performed += instance.OnMouseX;
            @MouseX.canceled += instance.OnMouseX;
            @MouseY.started += instance.OnMouseY;
            @MouseY.performed += instance.OnMouseY;
            @MouseY.canceled += instance.OnMouseY;
        }

        private void UnregisterCallbacks(IDragActions instance)
        {
            @DragRotate.started -= instance.OnDragRotate;
            @DragRotate.performed -= instance.OnDragRotate;
            @DragRotate.canceled -= instance.OnDragRotate;
            @MouseX.started -= instance.OnMouseX;
            @MouseX.performed -= instance.OnMouseX;
            @MouseX.canceled -= instance.OnMouseX;
            @MouseY.started -= instance.OnMouseY;
            @MouseY.performed -= instance.OnMouseY;
            @MouseY.canceled -= instance.OnMouseY;
        }

        public void RemoveCallbacks(IDragActions instance)
        {
            if (m_Wrapper.m_DragActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDragActions instance)
        {
            foreach (var item in m_Wrapper.m_DragActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DragActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DragActions @Drag => new DragActions(this);

    // Scanner
    private readonly InputActionMap m_Scanner;
    private List<IScannerActions> m_ScannerActionsCallbackInterfaces = new List<IScannerActions>();
    private readonly InputAction m_Scanner_Scan;
    public struct ScannerActions
    {
        private @PlayerInputActions m_Wrapper;
        public ScannerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scan => m_Wrapper.m_Scanner_Scan;
        public InputActionMap Get() { return m_Wrapper.m_Scanner; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScannerActions set) { return set.Get(); }
        public void AddCallbacks(IScannerActions instance)
        {
            if (instance == null || m_Wrapper.m_ScannerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ScannerActionsCallbackInterfaces.Add(instance);
            @Scan.started += instance.OnScan;
            @Scan.performed += instance.OnScan;
            @Scan.canceled += instance.OnScan;
        }

        private void UnregisterCallbacks(IScannerActions instance)
        {
            @Scan.started -= instance.OnScan;
            @Scan.performed -= instance.OnScan;
            @Scan.canceled -= instance.OnScan;
        }

        public void RemoveCallbacks(IScannerActions instance)
        {
            if (m_Wrapper.m_ScannerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IScannerActions instance)
        {
            foreach (var item in m_Wrapper.m_ScannerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ScannerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ScannerActions @Scanner => new ScannerActions(this);

    // Cheats
    private readonly InputActionMap m_Cheats;
    private List<ICheatsActions> m_CheatsActionsCallbackInterfaces = new List<ICheatsActions>();
    private readonly InputAction m_Cheats_UnlockAllSpells;
    public struct CheatsActions
    {
        private @PlayerInputActions m_Wrapper;
        public CheatsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UnlockAllSpells => m_Wrapper.m_Cheats_UnlockAllSpells;
        public InputActionMap Get() { return m_Wrapper.m_Cheats; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatsActions set) { return set.Get(); }
        public void AddCallbacks(ICheatsActions instance)
        {
            if (instance == null || m_Wrapper.m_CheatsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CheatsActionsCallbackInterfaces.Add(instance);
            @UnlockAllSpells.started += instance.OnUnlockAllSpells;
            @UnlockAllSpells.performed += instance.OnUnlockAllSpells;
            @UnlockAllSpells.canceled += instance.OnUnlockAllSpells;
        }

        private void UnregisterCallbacks(ICheatsActions instance)
        {
            @UnlockAllSpells.started -= instance.OnUnlockAllSpells;
            @UnlockAllSpells.performed -= instance.OnUnlockAllSpells;
            @UnlockAllSpells.canceled -= instance.OnUnlockAllSpells;
        }

        public void RemoveCallbacks(ICheatsActions instance)
        {
            if (m_Wrapper.m_CheatsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICheatsActions instance)
        {
            foreach (var item in m_Wrapper.m_CheatsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CheatsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CheatsActions @Cheats => new CheatsActions(this);

    // WorldInteractions
    private readonly InputActionMap m_WorldInteractions;
    private List<IWorldInteractionsActions> m_WorldInteractionsActionsCallbackInterfaces = new List<IWorldInteractionsActions>();
    private readonly InputAction m_WorldInteractions_Interact;
    public struct WorldInteractionsActions
    {
        private @PlayerInputActions m_Wrapper;
        public WorldInteractionsActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_WorldInteractions_Interact;
        public InputActionMap Get() { return m_Wrapper.m_WorldInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldInteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IWorldInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_WorldInteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_WorldInteractionsActionsCallbackInterfaces.Add(instance);
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IWorldInteractionsActions instance)
        {
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IWorldInteractionsActions instance)
        {
            if (m_Wrapper.m_WorldInteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IWorldInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_WorldInteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_WorldInteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public WorldInteractionsActions @WorldInteractions => new WorldInteractionsActions(this);
    public interface IMovementActions
    {
        void OnMoveDir(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface ICameraMovementActions
    {
        void OnMouseX(InputAction.CallbackContext context);
        void OnDragObject(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface IBookActionsActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnOpenBook(InputAction.CallbackContext context);
        void OnDrawButton(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ICardUsageActions
    {
        void OnUseCard0(InputAction.CallbackContext context);
        void OnUseCard1(InputAction.CallbackContext context);
        void OnUseCard2(InputAction.CallbackContext context);
        void OnUseCard3(InputAction.CallbackContext context);
        void OnUseCard4(InputAction.CallbackContext context);
        void OnUseCard5(InputAction.CallbackContext context);
        void OnCardUseSelf(InputAction.CallbackContext context);
        void OnCardUseThrow(InputAction.CallbackContext context);
        void OnCardSelectRelative(InputAction.CallbackContext context);
    }
    public interface IDragActions
    {
        void OnDragRotate(InputAction.CallbackContext context);
        void OnMouseX(InputAction.CallbackContext context);
        void OnMouseY(InputAction.CallbackContext context);
    }
    public interface IScannerActions
    {
        void OnScan(InputAction.CallbackContext context);
    }
    public interface ICheatsActions
    {
        void OnUnlockAllSpells(InputAction.CallbackContext context);
    }
    public interface IWorldInteractionsActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
